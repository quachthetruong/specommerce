// Code generated by mockery v2.43.2. DO NOT EDIT.

package apperrors

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Go provides a mock function with given fields: ctx, f
func (_m *MockService) Go(ctx context.Context, f func() error) {
	_m.Called(ctx, f)
}

// MockService_Go_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Go'
type MockService_Go_Call struct {
	*mock.Call
}

// Go is a helper method to define mock.On call
//   - ctx context.Context
//   - f func() error
func (_e *MockService_Expecter) Go(ctx interface{}, f interface{}) *MockService_Go_Call {
	return &MockService_Go_Call{Call: _e.mock.On("Go", ctx, f)}
}

func (_c *MockService_Go_Call) Run(run func(ctx context.Context, f func() error)) *MockService_Go_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func() error))
	})
	return _c
}

func (_c *MockService_Go_Call) Return() *MockService_Go_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockService_Go_Call) RunAndReturn(run func(context.Context, func() error)) *MockService_Go_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyError provides a mock function with given fields: ctx, err, additionalInfo
func (_m *MockService) NotifyError(ctx context.Context, err error, additionalInfo ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, err)
	_ca = append(_ca, additionalInfo...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, error, ...interface{}) error); ok {
		r0 = rf(ctx, err, additionalInfo...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_NotifyError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyError'
type MockService_NotifyError_Call struct {
	*mock.Call
}

// NotifyError is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
//   - additionalInfo ...interface{}
func (_e *MockService_Expecter) NotifyError(ctx interface{}, err interface{}, additionalInfo ...interface{}) *MockService_NotifyError_Call {
	return &MockService_NotifyError_Call{Call: _e.mock.On("NotifyError",
		append([]interface{}{ctx, err}, additionalInfo...)...)}
}

func (_c *MockService_NotifyError_Call) Run(run func(ctx context.Context, err error, additionalInfo ...interface{})) *MockService_NotifyError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(error), variadicArgs...)
	})
	return _c
}

func (_c *MockService_NotifyError_Call) Return(_a0 error) *MockService_NotifyError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_NotifyError_Call) RunAndReturn(run func(context.Context, error, ...interface{}) error) *MockService_NotifyError_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
