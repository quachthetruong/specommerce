// Code generated by mockery v2.43.2. DO NOT EDIT.

package apperrors

import mock "github.com/stretchr/testify/mock"

// MockAppErrorOption is an autogenerated mock type for the AppErrorOption type
type MockAppErrorOption struct {
	mock.Mock
}

type MockAppErrorOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppErrorOption) EXPECT() *MockAppErrorOption_Expecter {
	return &MockAppErrorOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: appError
func (_m *MockAppErrorOption) Execute(appError *AppError) {
	_m.Called(appError)
}

// MockAppErrorOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAppErrorOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - appError *AppError
func (_e *MockAppErrorOption_Expecter) Execute(appError interface{}) *MockAppErrorOption_Execute_Call {
	return &MockAppErrorOption_Execute_Call{Call: _e.mock.On("Execute", appError)}
}

func (_c *MockAppErrorOption_Execute_Call) Run(run func(appError *AppError)) *MockAppErrorOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*AppError))
	})
	return _c
}

func (_c *MockAppErrorOption_Execute_Call) Return() *MockAppErrorOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAppErrorOption_Execute_Call) RunAndReturn(run func(*AppError)) *MockAppErrorOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppErrorOption creates a new instance of MockAppErrorOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppErrorOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppErrorOption {
	mock := &MockAppErrorOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
