// Code generated by mockery v2.43.2. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCrudDatabaseOperation is an autogenerated mock type for the CrudDatabaseOperation type
type MockCrudDatabaseOperation[T interface{}] struct {
	mock.Mock
}

type MockCrudDatabaseOperation_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockCrudDatabaseOperation[T]) EXPECT() *MockCrudDatabaseOperation_Expecter[T] {
	return &MockCrudDatabaseOperation_Expecter[T]{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockCrudDatabaseOperation[T]) Create(_a0 context.Context, _a1 T) (T, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (T, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) T); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrudDatabaseOperation_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCrudDatabaseOperation_Create_Call[T interface{}] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 T
func (_e *MockCrudDatabaseOperation_Expecter[T]) Create(_a0 interface{}, _a1 interface{}) *MockCrudDatabaseOperation_Create_Call[T] {
	return &MockCrudDatabaseOperation_Create_Call[T]{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *MockCrudDatabaseOperation_Create_Call[T]) Run(run func(_a0 context.Context, _a1 T)) *MockCrudDatabaseOperation_Create_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *MockCrudDatabaseOperation_Create_Call[T]) Return(_a0 T, _a1 error) *MockCrudDatabaseOperation_Create_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrudDatabaseOperation_Create_Call[T]) RunAndReturn(run func(context.Context, T) (T, error)) *MockCrudDatabaseOperation_Create_Call[T] {
	_c.Call.Return(run)
	return _c
}

// CreateAll provides a mock function with given fields: _a0, _a1
func (_m *MockCrudDatabaseOperation[T]) CreateAll(_a0 context.Context, _a1 []T) ([]T, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAll")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []T) ([]T, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []T) []T); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []T) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrudDatabaseOperation_CreateAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAll'
type MockCrudDatabaseOperation_CreateAll_Call[T interface{}] struct {
	*mock.Call
}

// CreateAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []T
func (_e *MockCrudDatabaseOperation_Expecter[T]) CreateAll(_a0 interface{}, _a1 interface{}) *MockCrudDatabaseOperation_CreateAll_Call[T] {
	return &MockCrudDatabaseOperation_CreateAll_Call[T]{Call: _e.mock.On("CreateAll", _a0, _a1)}
}

func (_c *MockCrudDatabaseOperation_CreateAll_Call[T]) Run(run func(_a0 context.Context, _a1 []T)) *MockCrudDatabaseOperation_CreateAll_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]T))
	})
	return _c
}

func (_c *MockCrudDatabaseOperation_CreateAll_Call[T]) Return(_a0 []T, _a1 error) *MockCrudDatabaseOperation_CreateAll_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrudDatabaseOperation_CreateAll_Call[T]) RunAndReturn(run func(context.Context, []T) ([]T, error)) *MockCrudDatabaseOperation_CreateAll_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockCrudDatabaseOperation[T]) Delete(_a0 context.Context, _a1 T) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCrudDatabaseOperation_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCrudDatabaseOperation_Delete_Call[T interface{}] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 T
func (_e *MockCrudDatabaseOperation_Expecter[T]) Delete(_a0 interface{}, _a1 interface{}) *MockCrudDatabaseOperation_Delete_Call[T] {
	return &MockCrudDatabaseOperation_Delete_Call[T]{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockCrudDatabaseOperation_Delete_Call[T]) Run(run func(_a0 context.Context, _a1 T)) *MockCrudDatabaseOperation_Delete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *MockCrudDatabaseOperation_Delete_Call[T]) Return(_a0 error) *MockCrudDatabaseOperation_Delete_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCrudDatabaseOperation_Delete_Call[T]) RunAndReturn(run func(context.Context, T) error) *MockCrudDatabaseOperation_Delete_Call[T] {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: _a0, _a1
func (_m *MockCrudDatabaseOperation[T]) DeleteById(_a0 context.Context, _a1 interface{}) (int, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrudDatabaseOperation_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockCrudDatabaseOperation_DeleteById_Call[T interface{}] struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
func (_e *MockCrudDatabaseOperation_Expecter[T]) DeleteById(_a0 interface{}, _a1 interface{}) *MockCrudDatabaseOperation_DeleteById_Call[T] {
	return &MockCrudDatabaseOperation_DeleteById_Call[T]{Call: _e.mock.On("DeleteById", _a0, _a1)}
}

func (_c *MockCrudDatabaseOperation_DeleteById_Call[T]) Run(run func(_a0 context.Context, _a1 interface{})) *MockCrudDatabaseOperation_DeleteById_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockCrudDatabaseOperation_DeleteById_Call[T]) Return(_a0 int, _a1 error) *MockCrudDatabaseOperation_DeleteById_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrudDatabaseOperation_DeleteById_Call[T]) RunAndReturn(run func(context.Context, interface{}) (int, error)) *MockCrudDatabaseOperation_DeleteById_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: _a0, _a1
func (_m *MockCrudDatabaseOperation[T]) Exists(_a0 context.Context, _a1 ...SelectCriteria) (bool, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...SelectCriteria) (bool, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...SelectCriteria) bool); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...SelectCriteria) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrudDatabaseOperation_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockCrudDatabaseOperation_Exists_Call[T interface{}] struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...SelectCriteria
func (_e *MockCrudDatabaseOperation_Expecter[T]) Exists(_a0 interface{}, _a1 ...interface{}) *MockCrudDatabaseOperation_Exists_Call[T] {
	return &MockCrudDatabaseOperation_Exists_Call[T]{Call: _e.mock.On("Exists",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockCrudDatabaseOperation_Exists_Call[T]) Run(run func(_a0 context.Context, _a1 ...SelectCriteria)) *MockCrudDatabaseOperation_Exists_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]SelectCriteria, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(SelectCriteria)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCrudDatabaseOperation_Exists_Call[T]) Return(_a0 bool, _a1 error) *MockCrudDatabaseOperation_Exists_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrudDatabaseOperation_Exists_Call[T]) RunAndReturn(run func(context.Context, ...SelectCriteria) (bool, error)) *MockCrudDatabaseOperation_Exists_Call[T] {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: _a0, _a1
func (_m *MockCrudDatabaseOperation[T]) FindAll(_a0 context.Context, _a1 ...SelectCriteria) ([]T, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...SelectCriteria) ([]T, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...SelectCriteria) []T); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...SelectCriteria) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrudDatabaseOperation_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockCrudDatabaseOperation_FindAll_Call[T interface{}] struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...SelectCriteria
func (_e *MockCrudDatabaseOperation_Expecter[T]) FindAll(_a0 interface{}, _a1 ...interface{}) *MockCrudDatabaseOperation_FindAll_Call[T] {
	return &MockCrudDatabaseOperation_FindAll_Call[T]{Call: _e.mock.On("FindAll",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockCrudDatabaseOperation_FindAll_Call[T]) Run(run func(_a0 context.Context, _a1 ...SelectCriteria)) *MockCrudDatabaseOperation_FindAll_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]SelectCriteria, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(SelectCriteria)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCrudDatabaseOperation_FindAll_Call[T]) Return(_a0 []T, _a1 error) *MockCrudDatabaseOperation_FindAll_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrudDatabaseOperation_FindAll_Call[T]) RunAndReturn(run func(context.Context, ...SelectCriteria) ([]T, error)) *MockCrudDatabaseOperation_FindAll_Call[T] {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCrudDatabaseOperation[T]) FindById(_a0 context.Context, _a1 interface{}, _a2 ...SelectCriteria) (interface{}, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...SelectCriteria) (interface{}, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...SelectCriteria) interface{}); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...SelectCriteria) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrudDatabaseOperation_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockCrudDatabaseOperation_FindById_Call[T interface{}] struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
//   - _a2 ...SelectCriteria
func (_e *MockCrudDatabaseOperation_Expecter[T]) FindById(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCrudDatabaseOperation_FindById_Call[T] {
	return &MockCrudDatabaseOperation_FindById_Call[T]{Call: _e.mock.On("FindById",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCrudDatabaseOperation_FindById_Call[T]) Run(run func(_a0 context.Context, _a1 interface{}, _a2 ...SelectCriteria)) *MockCrudDatabaseOperation_FindById_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]SelectCriteria, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(SelectCriteria)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockCrudDatabaseOperation_FindById_Call[T]) Return(_a0 interface{}, _a1 error) *MockCrudDatabaseOperation_FindById_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrudDatabaseOperation_FindById_Call[T]) RunAndReturn(run func(context.Context, interface{}, ...SelectCriteria) (interface{}, error)) *MockCrudDatabaseOperation_FindById_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockCrudDatabaseOperation[T]) Get(_a0 context.Context, _a1 ...SelectCriteria) (T, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...SelectCriteria) (T, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...SelectCriteria) T); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...SelectCriteria) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrudDatabaseOperation_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCrudDatabaseOperation_Get_Call[T interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...SelectCriteria
func (_e *MockCrudDatabaseOperation_Expecter[T]) Get(_a0 interface{}, _a1 ...interface{}) *MockCrudDatabaseOperation_Get_Call[T] {
	return &MockCrudDatabaseOperation_Get_Call[T]{Call: _e.mock.On("Get",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockCrudDatabaseOperation_Get_Call[T]) Run(run func(_a0 context.Context, _a1 ...SelectCriteria)) *MockCrudDatabaseOperation_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]SelectCriteria, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(SelectCriteria)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCrudDatabaseOperation_Get_Call[T]) Return(_a0 T, _a1 error) *MockCrudDatabaseOperation_Get_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrudDatabaseOperation_Get_Call[T]) RunAndReturn(run func(context.Context, ...SelectCriteria) (T, error)) *MockCrudDatabaseOperation_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockCrudDatabaseOperation[T]) Update(_a0 context.Context, _a1 T) (T, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (T, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) T); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrudDatabaseOperation_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCrudDatabaseOperation_Update_Call[T interface{}] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 T
func (_e *MockCrudDatabaseOperation_Expecter[T]) Update(_a0 interface{}, _a1 interface{}) *MockCrudDatabaseOperation_Update_Call[T] {
	return &MockCrudDatabaseOperation_Update_Call[T]{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *MockCrudDatabaseOperation_Update_Call[T]) Run(run func(_a0 context.Context, _a1 T)) *MockCrudDatabaseOperation_Update_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *MockCrudDatabaseOperation_Update_Call[T]) Return(_a0 T, _a1 error) *MockCrudDatabaseOperation_Update_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrudDatabaseOperation_Update_Call[T]) RunAndReturn(run func(context.Context, T) (T, error)) *MockCrudDatabaseOperation_Update_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockCrudDatabaseOperation creates a new instance of MockCrudDatabaseOperation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCrudDatabaseOperation[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCrudDatabaseOperation[T] {
	mock := &MockCrudDatabaseOperation[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
